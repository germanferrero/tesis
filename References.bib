@InProceedings{10.1007/978-3-030-99524-9_23,
author="Chakarov, Aleksandar
and Fedchin, Aleksandr
and Rakamari{\'{c}}, Zvonimir
and Rungta, Neha",
editor="Fisman, Dana
and Rosu, Grigore",
title="Better Counterexamples for Dafny",
booktitle="Tools and Algorithms for the Construction and Analysis of Systems",
year="2022",
publisher="Springer International Publishing",
address="Cham",
pages="404--411",
abstract="Dafny is a verification-aware programming language used at Amazon Web Services to develop critical components of their access management, storage, and cryptography infrastructures. The Dafny toolchain provides a verifier that can prove an implementation of a method satisfies its specification. When the underlying SMT solver cannot establish a proof, it generates a counterexample. These counterexamples are hard to understand and their interpretation is often a bottleneck in the proof debugging process. In this paper, we introduce an open-source tool that transforms counterexamples generated by the SMT solver to a more user-friendly format that maps to the Dafny syntax and is suitable for further processing. This new tool allows the Dafny developers to quickly identify the root cause of a problem with their proof, thereby speeding up the development of Dafny projects.",
isbn="978-3-030-99524-9"
}

@inproceedings{10.1145/1108792.1108813,
author = {Barnett, Mike and Leino, K. Rustan M.},
title = {Weakest-precondition of unstructured programs},
year = {2005},
isbn = {1595932399},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1108792.1108813},
doi = {10.1145/1108792.1108813},
abstract = {Program verification systems typically transform a program into a logical expression which is then fed to a theorem prover. The logical expression represents the weakest precondition of the program relative to its specification; when (and if!) the theorem prover is able to prove the expression, then the program is considered correct. Computing such a logical expression for an imperative, structured program is straightforward, although there are issues having to do with loops and the efficiency both of the computation and of the complexity of the formula with respect to the theorem prover. This paper presents a novel approach for computing the weakest precondition of an unstructured program that is sound even in the presence of loops. The computation is efficient and the resulting logical expression provides more leeway for the theorem prover efficiently to attack the proof.},
booktitle = {Proceedings of the 6th ACM SIGPLAN-SIGSOFT Workshop on Program Analysis for Software Tools and Engineering},
pages = {82â€“87},
numpages = {6},
location = {Lisbon, Portugal},
series = {PASTE '05}
}



